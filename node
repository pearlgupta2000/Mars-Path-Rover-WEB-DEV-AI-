
class node{
	
	constructor(){
		this.parent_i=-1;
		this.parent_j=-1;
		this.f=MAX_VALUE;
		this.g=MAX_VALUE;
		this.h=MAX_VALUE;
	}	
};

/*class pair{
	constructor(x,y){
		this.x=x;
		this.y=y;
	}
}*/

class pPair{
	constructor(f,x,y){
		this.f=f;
		this.x=x;
		this.y=y;
	}
}



 var width = window.outerWidth;
 var height = window.outerHeight;
 var columns = Math.floor(width/34.55);
 var rows = Math.floor(height/34.55);

	
var grid_array=new Array(rows);     // nodes array containg inf abt parent f g h

for(var i=0;i<rows;i++){
	grid_array[i]=new Array(columns);  
};


//Grid containing 0 and 1;

function isValid(row,col) 
{ 
    // Returns true if row number and column number 
    // is in range 
    return (row >= 0) && (row < rowNumber) && 
           (col >= 0) && (col < columnNumber); 
} 
  
// A Utility Function to check whether the given cell is 
// blocked or not 
function isUnBlocked(Grid[][columnNumber],row,col) 
{ 
    // Returns true if the cell is not blocked else false 
    if (Grid[row][col] == 1) 
        return (true); 
    else
        return (false); 
} 
  
// A Utility Function to check whether destination cell has 
// been reached or not 
function isDestination(row,col,dest) 
{ 
    if (row == dest[0] && col == dest[1]) 
        return (true); 
    else
        return (false); 
} 
  
// A Utility Function to calculate the 'h' heuristics. 
function calculateHValue(row,col,dest) 
{ 
    // Return using the distance formula 
    return (Math.sqrt ((row-dest[0])*(row-dest[0]) 
                          + (col-dest[1])*(col-dest[1]))); 
} 
  
// A Utility Function to trace the path from the source 
// to destination 
/**void tracePath(cell cellDetails[][COL], Pair dest) 
{ 
    printf ("\nThe Path is "); 
    int row = dest.first; 
    int col = dest.second; 
  
    stack<Pair> Path; 
  
    while (!(cellDetails[row][col].parent_i == row 
             && cellDetails[row][col].parent_j == col )) 
    { 
        Path.push (make_pair (row, col)); 
        int temp_row = cellDetails[row][col].parent_i; 
        int temp_col = cellDetails[row][col].parent_j; 
        row = temp_row; 
        col = temp_col; 
    } 
  
    Path.push (make_pair (row, col)); 
    while (!Path.empty()) 
    { 
        pair<int,int> p = Path.top(); 
        Path.pop(); 
        printf("-> (%d,%d) ",p.first,p.second); 
    } 
  
    return; 
} **/
  





function aStarSearch(Grid[rowNumber][columnNumber],src,dest) 
{ 
    // If the source is out of range 
  /**  if (isValid (src.x, src.y) == false) 
    { 
        alert ("Source is invalid\n"); 
        return; 
    } 
  
    // If the destination is out of range 
    if (isValid (dest.first, dest.second) == false) 
    { 
        printf ("Destination is invalid\n"); 
        return; 
    } 
  
    // Either the source or the destination is blocked 
    if (isUnBlocked(grid, src.first, src.second) == false || 
            isUnBlocked(grid, dest.first, dest.second) == false) 
    { 
        printf ("Source or the destination is blocked\n"); 
        return; 
    } 
  
    // If the destination cell is the same as source cell 
    if (isDestination(src.first, src.second, dest) == true) 
    { 
        printf ("We are already at the destination\n"); 
        return; 
    } **/
  
    // Create a closed list and initialise it to false which means 
    // that no cell has been included yet 
    // This closed list is implemented as a boolean 2D array 
    var closedList=new Array[rowNumber][columnNumber]; 
  //  memset(closedList, false, sizeof (closedList)); 
     for(var i=0;i<rowNumber;i++){
		 for(var j=0;j<columnNumber;j++){
			 closedList[i][j]=false;
		 }
	 }
  
    // Declare a 2D array of structure to hold the details 
    //of that cell 
     cellDetails = new Array[rowNumber][columnNumber]; 
  
    var i, j; 
  
    for (i=0; i<rowNumber; i++) 
    { 
        for (j=0; j<columnNumber; j++) 
        { 
	        node c;
			cellDetails[i].push(c);
        } 
    } 
  
    // Initialising the parameters of the starting node 
	
    i = src[0], j = src[1]; 
    cellDetails[i][j].f = 0.0; 
    cellDetails[i][j].g = 0.0; 
    cellDetails[i][j].h = 0.0; 
    cellDetails[i][j].parent_i = i; 
    cellDetails[i][j].parent_j = j; 
    
    /* 
     Create an open list having information as- 
     <f, <i, j>> 
     where f = g + h, 
     and i, j are the row and column index of that cell 
     Note that 0 <= i <= ROW-1 & 0 <= j <= COL-1 
     This open list is implenented as a set of pair of pair.*/
    var openList = new Array(); 
  
    // Put the starting cell on the open list and set its 
    // 'f' as 0 
	pPair current;
	current.f=0.0;
	current.x=i;
	current.y=j;
	
    openList.push=current; 
  
    // We set this boolean value as false as initially 
    // the destination is not reached. 
    var foundDest = false; 
  
    while (openList.length!=0) 
    { 
        openList.sort();
        var p = openList[0]; 
  
        // Remove this vertex from the open list 
        delete openList[0];
  
        // Add this vertex to the closed list 
        i = p.x; 
        j = p.y; 
        closedList[i][j] = true; 
       
       /* 
        Generating all the 8 successor of this cell 
  
            N.W   N   N.E 
              \   |   / 
               \  |  / 
            W----Cell----E 
                 / | \ 
               /   |  \ 
            S.W    S   S.E 
  
        Cell-->Popped Cell (i, j) 
        N -->  North       (i-1, j) 
        S -->  South       (i+1, j) 
        E -->  East        (i, j+1) 
        W -->  West           (i, j-1) 
        N.E--> North-East  (i-1, j+1) 
        N.W--> North-West  (i-1, j-1) 
        S.E--> South-East  (i+1, j+1) 
        S.W--> South-West  (i+1, j-1)*/
  
        // To store the 'g', 'h' and 'f' of the 8 successors 
        var gNew, hNew, fNew; 
  
        //----------- 1st Successor (North) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid(i-1, j) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination(i-1, j, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i-1][j].parent_i = i; 
                cellDetails[i-1][j].parent_j = j; 
              //  printf ("The destination cell is found\n"); 
                tracePath (cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i-1][j] == false && 
                     isUnBlocked(Grid, i-1, j) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.0; 
		
                hNew = calculateHValue (i-1, j, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i-1][j].f == MAX_VALUE || 
                        cellDetails[i-1][j].f > fNew) 
                { 
				
				   		pPair current;
	current.f=fNew;
	current.x=i-1;
	current.y=j;
                    openList.push(current); 
  
                    // Update the details of this cell 
                    cellDetails[i-1][j].f = fNew; 
                    cellDetails[i-1][j].g = gNew; 
                    cellDetails[i-1][j].h = hNew; 
                    cellDetails[i-1][j].parent_i = i; 
                    cellDetails[i-1][j].parent_j = j; 
                } 
            } 
        } 
  
        //----------- 2nd Successor (South) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid(i+1, j) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination(i+1, j, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i+1][j].parent_i = i; 
                cellDetails[i+1][j].parent_j = j; 
               // printf("The destination cell is found\n"); 
                tracePath(cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i+1][j] == false && 
                     isUnBlocked(Grid, i+1, j) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.0; 
                hNew = calculateHValue(i+1, j, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i+1][j].f == MAX_VALUE || 
                        cellDetails[i+1][j].f > fNew) 
                { 
						pPair current;
	current.f=fNew;
	current.x=i+1;
	current.y=j;
                    openList.push(current); 
                    // Update the details of this cell 
                    cellDetails[i+1][j].f = fNew; 
                    cellDetails[i+1][j].g = gNew; 
                    cellDetails[i+1][j].h = hNew; 
                    cellDetails[i+1][j].parent_i = i; 
                    cellDetails[i+1][j].parent_j = j; 
                } 
            } 
        } 
  
        //----------- 3rd Successor (East) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid (i, j+1) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination(i, j+1, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i][j+1].parent_i = i; 
                cellDetails[i][j+1].parent_j = j; 
                printf("The destination cell is found\n"); 
                tracePath(cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
  
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i][j+1] == false && 
                     isUnBlocked (grid, i, j+1) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.0; 
                hNew = calculateHValue (i, j+1, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i][j+1].f == MAX_VALUE || 
                        cellDetails[i][j+1].f > fNew) 
                { 
						pPair current;
	current.f=fNew;
	current.x=i;
	current.y=j+1;
                    openList.push(current); 
  
                    // Update the details of this cell 
                    cellDetails[i][j+1].f = fNew; 
                    cellDetails[i][j+1].g = gNew; 
                    cellDetails[i][j+1].h = hNew; 
                    cellDetails[i][j+1].parent_i = i; 
                    cellDetails[i][j+1].parent_j = j; 
                } 
            } 
        } 
  
        //----------- 4th Successor (West) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid(i, j-1) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination(i, j-1, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i][j-1].parent_i = i; 
                cellDetails[i][j-1].parent_j = j; 
             //   printf("The destination cell is found\n"); 
                tracePath(cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
  
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i][j-1] == false && 
                     isUnBlocked(grid, i, j-1) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.0; 
                hNew = calculateHValue(i, j-1, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i][j-1].f == FLT_MAX || 
                        cellDetails[i][j-1].f > fNew) 
                { 
						pPair current;
	current.f=fNew;
	current.x=i;
	current.y=j-1;
                    openList.insert( current); 
  
                    // Update the details of this cell 
                    cellDetails[i][j-1].f = fNew; 
                    cellDetails[i][j-1].g = gNew; 
                    cellDetails[i][j-1].h = hNew; 
                    cellDetails[i][j-1].parent_i = i; 
                    cellDetails[i][j-1].parent_j = j; 
                } 
            } 
        } 
  
        //----------- 5th Successor (North-East) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid(i-1, j+1) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination(i-1, j+1, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i-1][j+1].parent_i = i; 
                cellDetails[i-1][j+1].parent_j = j; 
                printf ("The destination cell is found\n"); 
                tracePath (cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
  
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i-1][j+1] == false && 
                     isUnBlocked(grid, i-1, j+1) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.414; 
                hNew = calculateHValue(i-1, j+1, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i-1][j+1].f == MAX_VALUE || 
                        cellDetails[i-1][j+1].f > fNew) 
                { 
						pPair current;
	current.f=fNew;
	current.x=i-1;
	current.y=j+1;
                    openList.insert( current); 
  
                    // Update the details of this cell 
                    cellDetails[i-1][j+1].f = fNew; 
                    cellDetails[i-1][j+1].g = gNew; 
                    cellDetails[i-1][j+1].h = hNew; 
                    cellDetails[i-1][j+1].parent_i = i; 
                    cellDetails[i-1][j+1].parent_j = j; 
                } 
            } 
        } 
  
        //----------- 6th Successor (North-West) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid (i-1, j-1) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination (i-1, j-1, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i-1][j-1].parent_i = i; 
                cellDetails[i-1][j-1].parent_j = j; 
                printf ("The destination cell is found\n"); 
                tracePath (cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
  
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i-1][j-1] == false && 
                     isUnBlocked(grid, i-1, j-1) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.414; 
                hNew = calculateHValue(i-1, j-1, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i-1][j-1].f == MAX_VALUE || 
                        cellDetails[i-1][j-1].f > fNew) 
                { 
						pPair current;
	current.f=fNew;
	current.x=i-1;
	current.y=j-1;
                    openList.insert( current); 
                    // Update the details of this cell 
                    cellDetails[i-1][j-1].f = fNew; 
                    cellDetails[i-1][j-1].g = gNew; 
                    cellDetails[i-1][j-1].h = hNew; 
                    cellDetails[i-1][j-1].parent_i = i; 
                    cellDetails[i-1][j-1].parent_j = j; 
                } 
            } 
        } 
  
        //----------- 7th Successor (South-East) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid(i+1, j+1) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination(i+1, j+1, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i+1][j+1].parent_i = i; 
                cellDetails[i+1][j+1].parent_j = j; 
                printf ("The destination cell is found\n"); 
                tracePath (cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
  
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i+1][j+1] == false && 
                     isUnBlocked(grid, i+1, j+1) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.414; 
                hNew = calculateHValue(i+1, j+1, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i+1][j+1].f == MAX_VALUE || 
                        cellDetails[i+1][j+1].f > fNew) 
                { 		pPair current;
	current.f=fNew;
	current.x=i+1;
	current.y=j+1;
                    openList.insert(current); 
  
                    // Update the details of this cell 
                    cellDetails[i+1][j+1].f = fNew; 
                    cellDetails[i+1][j+1].g = gNew; 
                    cellDetails[i+1][j+1].h = hNew; 
                    cellDetails[i+1][j+1].parent_i = i; 
                    cellDetails[i+1][j+1].parent_j = j; 
                } 
            } 
        } 
  
        //----------- 8th Successor (South-West) ------------ 
  
        // Only process this cell if this is a valid one 
        if (isValid (i+1, j-1) == true) 
        { 
            // If the destination cell is the same as the 
            // current successor 
            if (isDestination(i+1, j-1, dest) == true) 
            { 
                // Set the Parent of the destination cell 
                cellDetails[i+1][j-1].parent_i = i; 
                cellDetails[i+1][j-1].parent_j = j; 
                printf("The destination cell is found\n"); 
                tracePath(cellDetails, dest); 
                foundDest = true; 
                return; 
            } 
  
            // If the successor is already on the closed 
            // list or if it is blocked, then ignore it. 
            // Else do the following 
            else if (closedList[i+1][j-1] == false && 
                     isUnBlocked(grid, i+1, j-1) == true) 
            { 
                gNew = cellDetails[i][j].g + 1.414; 
                hNew = calculateHValue(i+1, j-1, dest); 
                fNew = gNew + hNew; 
  
                // If it isn’t on the open list, add it to 
                // the open list. Make the current square 
                // the parent of this square. Record the 
                // f, g, and h costs of the square cell 
                //                OR 
                // If it is on the open list already, check 
                // to see if this path to that square is better, 
                // using 'f' cost as the measure. 
                if (cellDetails[i+1][j-1].f == MAX_VALUE || 
                        cellDetails[i+1][j-1].f > fNew) 
                { 
						pPair current;
	current.f=fNew;
	current.x=i+1;
	current.y=j-1;
                    openList.insert(current); 
  
                    // Update the details of this cell 
                    cellDetails[i+1][j-1].f = fNew; 
                    cellDetails[i+1][j-1].g = gNew; 
                    cellDetails[i+1][j-1].h = hNew; 
                    cellDetails[i+1][j-1].parent_i = i; 
                    cellDetails[i+1][j-1].parent_j = j; 
                } 
            } 
        } 
    } 
  
    // When the destination cell is not found and the open 
    // list is empty, then we conclude that we failed to 
    // reach the destiantion cell. This may happen when the 
    // there is no way to destination cell (due to blockages) 
    if (foundDest == false) 
     //   printf("Failed to find the Destination Cell\n"); 
  
    return; 
} 







	